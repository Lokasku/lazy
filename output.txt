   Compiling risk v0.1.0 (/home/lokasku/dev/rust/risk)
error: failed to run custom build command for `risk v0.1.0 (/home/lokasku/dev/rust/risk)`

Caused by:
  process didn't exit successfully: `/home/lokasku/dev/rust/risk/target/debug/build/risk-f2c97a94d0f9763b/build-script-build` (exit status: 1)
  --- stdout
  processing file `/home/lokasku/dev/rust/risk/src/parser/parser.lalrpop`
  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:112:5: 112:9: Local ambiguity detected

    The problem arises after having observed the following symbols in the input:
      Expr3
    At that point, if the next token is a `"("`, then the parser can proceed in two different
    ways.

    First, the parser could execute the production at
    /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:112:5: 112:9, which would consume
    the top 1 token(s) from the stack and produce a `Expr2`. This might then yield a parse
    tree like
      Expr3    ╷ ExprX
      ├─Expr2──┤     │
      ├─BinOp2─┤     │
      ├─BinOp1─┤     │
      ├─Expr1──┤     │
      ├─Expr0──┤     │
      ├─ExprX──┤     │
      ├─ExprX+─┘     │
      └─ExprX+───────┘

    Alternatively, the parser could shift the `"("` token and later use it to construct a
    `Expr3`. This might then yield a parse tree like
      Expr3 "(" Comma<ExprX> ")"
      │     ├─Expr3────────────┤
      │     └─(Expr3)+─────────┤
      └─Expr2──────────────────┘

    See the LALRPOP manual for advice on making your grammar LR(1).

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:112:5: 112:9: Local ambiguity detected

    The problem arises after having observed the following symbols in the input:
      Expr3
    At that point, if the next token is a `"["`, then the parser can proceed in two different
    ways.

    First, the parser could execute the production at
    /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:112:5: 112:9, which would consume
    the top 1 token(s) from the stack and produce a `Expr2`. This might then yield a parse
    tree like
      Expr3    ╷ ExprX
      ├─Expr2──┤     │
      ├─BinOp2─┤     │
      ├─BinOp1─┤     │
      ├─Expr1──┤     │
      ├─Expr0──┤     │
      ├─ExprX──┤     │
      ├─ExprX+─┘     │
      └─ExprX+───────┘

    Alternatively, the parser could shift the `"["` token and later use it to construct a
    `Expr3`. This might then yield a parse tree like
      Expr3 "[" Comma<ExprX> "]"
      │     ├─Expr3────────────┤
      │     └─(Expr3)+─────────┤
      └─Expr2──────────────────┘

    See the LALRPOP manual for advice on making your grammar LR(1).

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:112:5: 112:9: Local ambiguity detected

    The problem arises after having observed the following symbols in the input:
      Expr3
    At that point, if the next token is a `r#"\"[^\"]*\""#`, then the parser can proceed in
    two different ways.

    First, the parser could execute the production at
    /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:112:5: 112:9, which would consume
    the top 1 token(s) from the stack and produce a `Expr2`. This might then yield a parse
    tree like
      Expr3    ╷ ExprX
      ├─Expr2──┤     │
      ├─BinOp2─┤     │
      ├─BinOp1─┤     │
      ├─Expr1──┤     │
      ├─Expr0──┤     │
      ├─ExprX──┤     │
      ├─ExprX+─┘     │
      └─ExprX+───────┘

    Alternatively, the parser could shift the `r#"\"[^\"]*\""#` token and later use it to
    construct a `Literal`. This might then yield a parse tree like
      Expr3 r#"\"[^\"]*\""#
      │     ├─Literal─────┤
      │     ├─Expr3───────┤
      │     └─(Expr3)+────┤
      └─Expr2─────────────┘

    See the LALRPOP manual for advice on making your grammar LR(1).

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:112:5: 112:9: Local ambiguity detected

    The problem arises after having observed the following symbols in the input:
      Expr3
    At that point, if the next token is a `r#"'[^']'"#`, then the parser can proceed in two
    different ways.

    First, the parser could execute the production at
    /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:112:5: 112:9, which would consume
    the top 1 token(s) from the stack and produce a `Expr2`. This might then yield a parse
    tree like
      Expr3    ╷ ExprX
      ├─Expr2──┤     │
      ├─BinOp2─┤     │
      ├─BinOp1─┤     │
      ├─Expr1──┤     │
      ├─Expr0──┤     │
      ├─ExprX──┤     │
      ├─ExprX+─┘     │
      └─ExprX+───────┘

    Alternatively, the parser could shift the `r#"'[^']'"#` token and later use it to
    construct a `Literal`. This might then yield a parse tree like
      Expr3 r#"'[^']'"#╷
      │     ├─Literal──┤
      │     ├─Expr3────┤
      │     └─(Expr3)+─┤
      └─Expr2──────────┘

    See the LALRPOP manual for advice on making your grammar LR(1).

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:112:5: 112:9: Local ambiguity detected

    The problem arises after having observed the following symbols in the input:
      Expr3
    At that point, if the next token is a `r#"[+-]?\\d+"#`, then the parser can proceed in two
    different ways.

    First, the parser could execute the production at
    /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:112:5: 112:9, which would consume
    the top 1 token(s) from the stack and produce a `Expr2`. This might then yield a parse
    tree like
      Expr3    ╷ ExprX
      ├─Expr2──┤     │
      ├─BinOp2─┤     │
      ├─BinOp1─┤     │
      ├─Expr1──┤     │
      ├─Expr0──┤     │
      ├─ExprX──┤     │
      ├─ExprX+─┘     │
      └─ExprX+───────┘

    Alternatively, the parser could shift the `r#"[+-]?\\d+"#` token and later use it to
    construct a `Literal`. This might then yield a parse tree like
      Expr3 r#"[+-]?\\d+"#
      │     ├─Literal────┤
      │     ├─Expr3──────┤
      │     └─(Expr3)+───┤
      └─Expr2────────────┘

    See the LALRPOP manual for advice on making your grammar LR(1).

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:112:5: 112:9: Local ambiguity detected

    The problem arises after having observed the following symbols in the input:
      Expr3
    At that point, if the next token is a `r#"[+-]?\\d+\\.\\d+"#`, then the parser can proceed
    in two different ways.

    First, the parser could execute the production at
    /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:112:5: 112:9, which would consume
    the top 1 token(s) from the stack and produce a `Expr2`. This might then yield a parse
    tree like
      Expr3    ╷ ExprX
      ├─Expr2──┤     │
      ├─BinOp2─┤     │
      ├─BinOp1─┤     │
      ├─Expr1──┤     │
      ├─Expr0──┤     │
      ├─ExprX──┤     │
      ├─ExprX+─┘     │
      └─ExprX+───────┘

    Alternatively, the parser could shift the `r#"[+-]?\\d+\\.\\d+"#` token and later use it
    to construct a `Literal`. This might then yield a parse tree like
      Expr3 r#"[+-]?\\d+\\.\\d+"#
      │     ├─Literal───────────┤
      │     ├─Expr3─────────────┤
      │     └─(Expr3)+──────────┤
      └─Expr2───────────────────┘

    See the LALRPOP manual for advice on making your grammar LR(1).

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:112:5: 112:9: Local ambiguity detected

    The problem arises after having observed the following symbols in the input:
      Expr3
    At that point, if the next token is a `r#"[A-Z][a-zA-Z0-9]*"#`, then the parser can
    proceed in two different ways.

    First, the parser could execute the production at
    /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:112:5: 112:9, which would consume
    the top 1 token(s) from the stack and produce a `Expr2`. This might then yield a parse
    tree like
      Expr3    ╷ ExprX
      ├─Expr2──┤     │
      ├─BinOp2─┤     │
      ├─BinOp1─┤     │
      ├─Expr1──┤     │
      ├─Expr0──┤     │
      ├─ExprX──┤     │
      ├─ExprX+─┘     │
      └─ExprX+───────┘

    Alternatively, the parser could shift the `r#"[A-Z][a-zA-Z0-9]*"#` token and later use it
    to construct a `PCIdentifier`. This might then yield a parse tree like
      Expr3 r#"[A-Z][a-zA-Z0-9]*"#
      │     ├─PCIdentifier───────┤
      │     ├─Expr3──────────────┤
      │     └─(Expr3)+───────────┤
      └─Expr2────────────────────┘

    See the LALRPOP manual for advice on making your grammar LR(1).

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:112:5: 112:9: Local ambiguity detected

    The problem arises after having observed the following symbols in the input:
      Expr3
    At that point, if the next token is a `r#"[a-z][a-zA-Z0-9]*"#`, then the parser can
    proceed in two different ways.

    First, the parser could execute the production at
    /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:112:5: 112:9, which would consume
    the top 1 token(s) from the stack and produce a `Expr2`. This might then yield a parse
    tree like
      Expr3    ╷ ExprX
      ├─Expr2──┤     │
      ├─BinOp2─┤     │
      ├─BinOp1─┤     │
      ├─Expr1──┤     │
      ├─Expr0──┤     │
      ├─ExprX──┤     │
      ├─ExprX+─┘     │
      └─ExprX+───────┘

    Alternatively, the parser could shift the `r#"[a-z][a-zA-Z0-9]*"#` token and later use it
    to construct a `Identifier`. This might then yield a parse tree like
      Expr3 r#"[a-z][a-zA-Z0-9]*"#
      │     ├─Identifier─────────┤
      │     ├─Expr3──────────────┤
      │     └─(Expr3)+───────────┤
      └─Expr2────────────────────┘

    See the LALRPOP manual for advice on making your grammar LR(1).

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:275:26: 275:31: Conflict detected

      when in this state:
    BinOp1 = (*) BinOp1 "+" BinOp2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp1 = (*) BinOp1 "-" BinOp2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp1 = (*) BinOp2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "%" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "*" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "/" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "^" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr0 = (*) Expr1 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr0 = (*) Expr1 Annotation ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr1 = (*) BinOp1 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr2 = (*) Expr3 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr2 = (*) Expr3 (Expr3)+ ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) Identifier ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) Literal ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) PCIdentifier ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) "(" Comma<ExprX> ")" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) "[" Comma<ExprX> "]" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) Expr0 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "\\" Pattern+ "->" ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "if" ExprX "then" ExprX "else" ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "let" Binds "in" ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "match" ExprX "with" Check+ "." ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX+ = ExprX+ (*) ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Identifier = (*) r#"[a-z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"\"[^\"]*\""# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"'[^']'"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"[+-]?\\d+"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"[+-]?\\d+\\.\\d+"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    PCIdentifier = (*) r#"[A-Z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Program = ExprX+ (*) ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]

    and looking at a token `"("` we can reduce to a `Program` but we can also shift

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:275:26: 275:31: Conflict detected

      when in this state:
    BinOp1 = (*) BinOp1 "+" BinOp2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp1 = (*) BinOp1 "-" BinOp2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp1 = (*) BinOp2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "%" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "*" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "/" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "^" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr0 = (*) Expr1 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr0 = (*) Expr1 Annotation ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr1 = (*) BinOp1 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr2 = (*) Expr3 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr2 = (*) Expr3 (Expr3)+ ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) Identifier ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) Literal ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) PCIdentifier ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) "(" Comma<ExprX> ")" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) "[" Comma<ExprX> "]" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) Expr0 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "\\" Pattern+ "->" ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "if" ExprX "then" ExprX "else" ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "let" Binds "in" ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "match" ExprX "with" Check+ "." ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX+ = ExprX+ (*) ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Identifier = (*) r#"[a-z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"\"[^\"]*\""# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"'[^']'"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"[+-]?\\d+"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"[+-]?\\d+\\.\\d+"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    PCIdentifier = (*) r#"[A-Z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Program = ExprX+ (*) ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]

    and looking at a token `"["` we can reduce to a `Program` but we can also shift

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:275:26: 275:31: Conflict detected

      when in this state:
    BinOp1 = (*) BinOp1 "+" BinOp2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp1 = (*) BinOp1 "-" BinOp2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp1 = (*) BinOp2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "%" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "*" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "/" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "^" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr0 = (*) Expr1 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr0 = (*) Expr1 Annotation ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr1 = (*) BinOp1 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr2 = (*) Expr3 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr2 = (*) Expr3 (Expr3)+ ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) Identifier ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) Literal ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) PCIdentifier ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) "(" Comma<ExprX> ")" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) "[" Comma<ExprX> "]" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) Expr0 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "\\" Pattern+ "->" ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "if" ExprX "then" ExprX "else" ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "let" Binds "in" ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "match" ExprX "with" Check+ "." ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX+ = ExprX+ (*) ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Identifier = (*) r#"[a-z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"\"[^\"]*\""# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"'[^']'"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"[+-]?\\d+"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"[+-]?\\d+\\.\\d+"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    PCIdentifier = (*) r#"[A-Z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Program = ExprX+ (*) ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]

    and looking at a token `"\\"` we can reduce to a `Program` but we can also shift

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:275:26: 275:31: Conflict detected

      when in this state:
    BinOp1 = (*) BinOp1 "+" BinOp2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp1 = (*) BinOp1 "-" BinOp2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp1 = (*) BinOp2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "%" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "*" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "/" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "^" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr0 = (*) Expr1 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr0 = (*) Expr1 Annotation ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr1 = (*) BinOp1 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr2 = (*) Expr3 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr2 = (*) Expr3 (Expr3)+ ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) Identifier ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) Literal ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) PCIdentifier ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) "(" Comma<ExprX> ")" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) "[" Comma<ExprX> "]" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) Expr0 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "\\" Pattern+ "->" ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "if" ExprX "then" ExprX "else" ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "let" Binds "in" ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "match" ExprX "with" Check+ "." ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX+ = ExprX+ (*) ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Identifier = (*) r#"[a-z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"\"[^\"]*\""# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"'[^']'"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"[+-]?\\d+"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"[+-]?\\d+\\.\\d+"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    PCIdentifier = (*) r#"[A-Z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Program = ExprX+ (*) ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]

    and looking at a token `"if"` we can reduce to a `Program` but we can also shift

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:275:26: 275:31: Conflict detected

      when in this state:
    BinOp1 = (*) BinOp1 "+" BinOp2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp1 = (*) BinOp1 "-" BinOp2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp1 = (*) BinOp2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "%" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "*" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "/" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "^" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr0 = (*) Expr1 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr0 = (*) Expr1 Annotation ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr1 = (*) BinOp1 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr2 = (*) Expr3 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr2 = (*) Expr3 (Expr3)+ ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) Identifier ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) Literal ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) PCIdentifier ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) "(" Comma<ExprX> ")" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) "[" Comma<ExprX> "]" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) Expr0 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "\\" Pattern+ "->" ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "if" ExprX "then" ExprX "else" ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "let" Binds "in" ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "match" ExprX "with" Check+ "." ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX+ = ExprX+ (*) ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Identifier = (*) r#"[a-z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"\"[^\"]*\""# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"'[^']'"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"[+-]?\\d+"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"[+-]?\\d+\\.\\d+"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    PCIdentifier = (*) r#"[A-Z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Program = ExprX+ (*) ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]

    and looking at a token `"let"` we can reduce to a `Program` but we can also shift

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:275:26: 275:31: Conflict detected

      when in this state:
    BinOp1 = (*) BinOp1 "+" BinOp2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp1 = (*) BinOp1 "-" BinOp2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp1 = (*) BinOp2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "%" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "*" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "/" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "^" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr0 = (*) Expr1 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr0 = (*) Expr1 Annotation ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr1 = (*) BinOp1 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr2 = (*) Expr3 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr2 = (*) Expr3 (Expr3)+ ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) Identifier ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) Literal ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) PCIdentifier ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) "(" Comma<ExprX> ")" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) "[" Comma<ExprX> "]" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) Expr0 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "\\" Pattern+ "->" ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "if" ExprX "then" ExprX "else" ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "let" Binds "in" ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "match" ExprX "with" Check+ "." ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX+ = ExprX+ (*) ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Identifier = (*) r#"[a-z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"\"[^\"]*\""# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"'[^']'"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"[+-]?\\d+"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"[+-]?\\d+\\.\\d+"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    PCIdentifier = (*) r#"[A-Z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Program = ExprX+ (*) ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]

    and looking at a token `"match"` we can reduce to a `Program` but we can also shift

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:275:26: 275:31: Conflict detected

      when in this state:
    BinOp1 = (*) BinOp1 "+" BinOp2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp1 = (*) BinOp1 "-" BinOp2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp1 = (*) BinOp2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "%" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "*" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "/" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "^" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr0 = (*) Expr1 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr0 = (*) Expr1 Annotation ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr1 = (*) BinOp1 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr2 = (*) Expr3 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr2 = (*) Expr3 (Expr3)+ ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) Identifier ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) Literal ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) PCIdentifier ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) "(" Comma<ExprX> ")" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) "[" Comma<ExprX> "]" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) Expr0 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "\\" Pattern+ "->" ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "if" ExprX "then" ExprX "else" ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "let" Binds "in" ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "match" ExprX "with" Check+ "." ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX+ = ExprX+ (*) ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Identifier = (*) r#"[a-z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"\"[^\"]*\""# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"'[^']'"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"[+-]?\\d+"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"[+-]?\\d+\\.\\d+"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    PCIdentifier = (*) r#"[A-Z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Program = ExprX+ (*) ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]

    and looking at a token `r#"\"[^\"]*\""#` we can reduce to a `Program` but we can also shift

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:275:26: 275:31: Conflict detected

      when in this state:
    BinOp1 = (*) BinOp1 "+" BinOp2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp1 = (*) BinOp1 "-" BinOp2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp1 = (*) BinOp2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "%" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "*" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "/" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "^" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr0 = (*) Expr1 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr0 = (*) Expr1 Annotation ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr1 = (*) BinOp1 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr2 = (*) Expr3 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr2 = (*) Expr3 (Expr3)+ ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) Identifier ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) Literal ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) PCIdentifier ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) "(" Comma<ExprX> ")" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) "[" Comma<ExprX> "]" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) Expr0 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "\\" Pattern+ "->" ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "if" ExprX "then" ExprX "else" ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "let" Binds "in" ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "match" ExprX "with" Check+ "." ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX+ = ExprX+ (*) ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Identifier = (*) r#"[a-z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"\"[^\"]*\""# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"'[^']'"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"[+-]?\\d+"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"[+-]?\\d+\\.\\d+"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    PCIdentifier = (*) r#"[A-Z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Program = ExprX+ (*) ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]

    and looking at a token `r#"'[^']'"#` we can reduce to a `Program` but we can also shift

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:275:26: 275:31: Conflict detected

      when in this state:
    BinOp1 = (*) BinOp1 "+" BinOp2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp1 = (*) BinOp1 "-" BinOp2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp1 = (*) BinOp2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "%" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "*" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "/" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "^" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr0 = (*) Expr1 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr0 = (*) Expr1 Annotation ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr1 = (*) BinOp1 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr2 = (*) Expr3 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr2 = (*) Expr3 (Expr3)+ ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) Identifier ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) Literal ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) PCIdentifier ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) "(" Comma<ExprX> ")" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) "[" Comma<ExprX> "]" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) Expr0 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "\\" Pattern+ "->" ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "if" ExprX "then" ExprX "else" ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "let" Binds "in" ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "match" ExprX "with" Check+ "." ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX+ = ExprX+ (*) ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Identifier = (*) r#"[a-z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"\"[^\"]*\""# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"'[^']'"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"[+-]?\\d+"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"[+-]?\\d+\\.\\d+"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    PCIdentifier = (*) r#"[A-Z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Program = ExprX+ (*) ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]

    and looking at a token `r#"[+-]?\\d+"#` we can reduce to a `Program` but we can also shift

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:275:26: 275:31: Conflict detected

      when in this state:
    BinOp1 = (*) BinOp1 "+" BinOp2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp1 = (*) BinOp1 "-" BinOp2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp1 = (*) BinOp2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "%" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "*" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "/" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "^" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr0 = (*) Expr1 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr0 = (*) Expr1 Annotation ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr1 = (*) BinOp1 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr2 = (*) Expr3 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr2 = (*) Expr3 (Expr3)+ ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) Identifier ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) Literal ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) PCIdentifier ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) "(" Comma<ExprX> ")" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) "[" Comma<ExprX> "]" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) Expr0 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "\\" Pattern+ "->" ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "if" ExprX "then" ExprX "else" ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "let" Binds "in" ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "match" ExprX "with" Check+ "." ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX+ = ExprX+ (*) ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Identifier = (*) r#"[a-z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"\"[^\"]*\""# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"'[^']'"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"[+-]?\\d+"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"[+-]?\\d+\\.\\d+"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    PCIdentifier = (*) r#"[A-Z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Program = ExprX+ (*) ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]

    and looking at a token `r#"[+-]?\\d+\\.\\d+"#` we can reduce to a `Program` but we can also shift

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:275:26: 275:31: Conflict detected

      when in this state:
    BinOp1 = (*) BinOp1 "+" BinOp2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp1 = (*) BinOp1 "-" BinOp2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp1 = (*) BinOp2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "%" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "*" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "/" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "^" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr0 = (*) Expr1 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr0 = (*) Expr1 Annotation ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr1 = (*) BinOp1 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr2 = (*) Expr3 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr2 = (*) Expr3 (Expr3)+ ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) Identifier ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) Literal ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) PCIdentifier ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) "(" Comma<ExprX> ")" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) "[" Comma<ExprX> "]" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) Expr0 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "\\" Pattern+ "->" ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "if" ExprX "then" ExprX "else" ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "let" Binds "in" ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "match" ExprX "with" Check+ "." ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX+ = ExprX+ (*) ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Identifier = (*) r#"[a-z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"\"[^\"]*\""# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"'[^']'"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"[+-]?\\d+"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"[+-]?\\d+\\.\\d+"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    PCIdentifier = (*) r#"[A-Z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Program = ExprX+ (*) ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]

    and looking at a token `r#"[A-Z][a-zA-Z0-9]*"#` we can reduce to a `Program` but we can also shift

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:275:26: 275:31: Conflict detected

      when in this state:
    BinOp1 = (*) BinOp1 "+" BinOp2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp1 = (*) BinOp1 "-" BinOp2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp1 = (*) BinOp2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "%" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "*" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "/" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) BinOp2 "^" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = (*) Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr0 = (*) Expr1 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr0 = (*) Expr1 Annotation ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr1 = (*) BinOp1 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr2 = (*) Expr3 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr2 = (*) Expr3 (Expr3)+ ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) Identifier ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) Literal ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) PCIdentifier ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) "(" Comma<ExprX> ")" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) "[" Comma<ExprX> "]" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) Expr0 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "\\" Pattern+ "->" ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "if" ExprX "then" ExprX "else" ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "let" Binds "in" ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX = (*) "match" ExprX "with" Check+ "." ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    ExprX+ = ExprX+ (*) ExprX ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Identifier = (*) r#"[a-z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"\"[^\"]*\""# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"'[^']'"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"[+-]?\\d+"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"[+-]?\\d+\\.\\d+"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    PCIdentifier = (*) r#"[A-Z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Program = ExprX+ (*) ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]

    and looking at a token `r#"[a-z][a-zA-Z0-9]*"#` we can reduce to a `Program` but we can also shift

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:111:5: 111:73: Local ambiguity detected

    The problem arises after having observed the following symbols in the input:
      Expr3 (Expr3)+
    At that point, if the next token is a `"("`, then the parser can proceed in two different
    ways.

    First, the parser could execute the production at
    /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:111:5: 111:73, which would consume
    the top 2 token(s) from the stack and produce a `Expr2`. This might then yield a parse tree
    like
      Expr3 (Expr3)+ ExprX
      ├─Expr2──────┤     │
      ├─BinOp2─────┤     │
      ├─BinOp1─────┤     │
      ├─Expr1──────┤     │
      ├─Expr0──────┤     │
      ├─ExprX──────┤     │
      ├─ExprX+─────┘     │
      └─ExprX+───────────┘

    Alternatively, the parser could shift the `"("` token and later use it to construct a
    `Expr3`. This might then yield a parse tree like
      (Expr3)+ "(" Comma<ExprX> ")"
      │        └─Expr3────────────┤
      └─(Expr3)+──────────────────┘

    See the LALRPOP manual for advice on making your grammar LR(1).

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:111:5: 111:73: Local ambiguity detected

    The problem arises after having observed the following symbols in the input:
      Expr3 (Expr3)+
    At that point, if the next token is a `"["`, then the parser can proceed in two different
    ways.

    First, the parser could execute the production at
    /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:111:5: 111:73, which would consume
    the top 2 token(s) from the stack and produce a `Expr2`. This might then yield a parse tree
    like
      Expr3 (Expr3)+ ExprX
      ├─Expr2──────┤     │
      ├─BinOp2─────┤     │
      ├─BinOp1─────┤     │
      ├─Expr1──────┤     │
      ├─Expr0──────┤     │
      ├─ExprX──────┤     │
      ├─ExprX+─────┘     │
      └─ExprX+───────────┘

    Alternatively, the parser could shift the `"["` token and later use it to construct a
    `Expr3`. This might then yield a parse tree like
      (Expr3)+ "[" Comma<ExprX> "]"
      │        └─Expr3────────────┤
      └─(Expr3)+──────────────────┘

    See the LALRPOP manual for advice on making your grammar LR(1).

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:111:5: 111:73: Local ambiguity detected

    The problem arises after having observed the following symbols in the input:
      Expr3 (Expr3)+
    At that point, if the next token is a `r#"\"[^\"]*\""#`, then the parser can proceed in two
    different ways.

    First, the parser could execute the production at
    /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:111:5: 111:73, which would consume
    the top 2 token(s) from the stack and produce a `Expr2`. This might then yield a parse tree
    like
      Expr3 (Expr3)+ ExprX
      ├─Expr2──────┤     │
      ├─BinOp2─────┤     │
      ├─BinOp1─────┤     │
      ├─Expr1──────┤     │
      ├─Expr0──────┤     │
      ├─ExprX──────┤     │
      ├─ExprX+─────┘     │
      └─ExprX+───────────┘

    Alternatively, the parser could shift the `r#"\"[^\"]*\""#` token and later use it to
    construct a `Literal`. This might then yield a parse tree like
      (Expr3)+ r#"\"[^\"]*\""#
      │        ├─Literal─────┤
      │        └─Expr3───────┤
      └─(Expr3)+─────────────┘

    See the LALRPOP manual for advice on making your grammar LR(1).

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:111:5: 111:73: Local ambiguity detected

    The problem arises after having observed the following symbols in the input:
      Expr3 (Expr3)+
    At that point, if the next token is a `r#"'[^']'"#`, then the parser can proceed in two
    different ways.

    First, the parser could execute the production at
    /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:111:5: 111:73, which would consume
    the top 2 token(s) from the stack and produce a `Expr2`. This might then yield a parse tree
    like
      Expr3 (Expr3)+ ExprX
      ├─Expr2──────┤     │
      ├─BinOp2─────┤     │
      ├─BinOp1─────┤     │
      ├─Expr1──────┤     │
      ├─Expr0──────┤     │
      ├─ExprX──────┤     │
      ├─ExprX+─────┘     │
      └─ExprX+───────────┘

    Alternatively, the parser could shift the `r#"'[^']'"#` token and later use it to construct
    a `Literal`. This might then yield a parse tree like
      (Expr3)+ r#"'[^']'"#
      │        ├─Literal─┤
      │        └─Expr3───┤
      └─(Expr3)+─────────┘

    See the LALRPOP manual for advice on making your grammar LR(1).

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:111:5: 111:73: Local ambiguity detected

    The problem arises after having observed the following symbols in the input:
      Expr3 (Expr3)+
    At that point, if the next token is a `r#"[+-]?\\d+"#`, then the parser can proceed in two
    different ways.

    First, the parser could execute the production at
    /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:111:5: 111:73, which would consume
    the top 2 token(s) from the stack and produce a `Expr2`. This might then yield a parse tree
    like
      Expr3 (Expr3)+ ExprX
      ├─Expr2──────┤     │
      ├─BinOp2─────┤     │
      ├─BinOp1─────┤     │
      ├─Expr1──────┤     │
      ├─Expr0──────┤     │
      ├─ExprX──────┤     │
      ├─ExprX+─────┘     │
      └─ExprX+───────────┘

    Alternatively, the parser could shift the `r#"[+-]?\\d+"#` token and later use it to
    construct a `Literal`. This might then yield a parse tree like
      (Expr3)+ r#"[+-]?\\d+"#
      │        ├─Literal────┤
      │        └─Expr3──────┤
      └─(Expr3)+────────────┘

    See the LALRPOP manual for advice on making your grammar LR(1).

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:111:5: 111:73: Local ambiguity detected

    The problem arises after having observed the following symbols in the input:
      Expr3 (Expr3)+
    At that point, if the next token is a `r#"[+-]?\\d+\\.\\d+"#`, then the parser can proceed
    in two different ways.

    First, the parser could execute the production at
    /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:111:5: 111:73, which would consume
    the top 2 token(s) from the stack and produce a `Expr2`. This might then yield a parse tree
    like
      Expr3 (Expr3)+ ExprX
      ├─Expr2──────┤     │
      ├─BinOp2─────┤     │
      ├─BinOp1─────┤     │
      ├─Expr1──────┤     │
      ├─Expr0──────┤     │
      ├─ExprX──────┤     │
      ├─ExprX+─────┘     │
      └─ExprX+───────────┘

    Alternatively, the parser could shift the `r#"[+-]?\\d+\\.\\d+"#` token and later use it to
    construct a `Literal`. This might then yield a parse tree like
      (Expr3)+ r#"[+-]?\\d+\\.\\d+"#
      │        ├─Literal───────────┤
      │        └─Expr3─────────────┤
      └─(Expr3)+───────────────────┘

    See the LALRPOP manual for advice on making your grammar LR(1).

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:111:5: 111:73: Local ambiguity detected

    The problem arises after having observed the following symbols in the input:
      Expr3 (Expr3)+
    At that point, if the next token is a `r#"[A-Z][a-zA-Z0-9]*"#`, then the parser can proceed
    in two different ways.

    First, the parser could execute the production at
    /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:111:5: 111:73, which would consume
    the top 2 token(s) from the stack and produce a `Expr2`. This might then yield a parse tree
    like
      Expr3 (Expr3)+ ExprX
      ├─Expr2──────┤     │
      ├─BinOp2─────┤     │
      ├─BinOp1─────┤     │
      ├─Expr1──────┤     │
      ├─Expr0──────┤     │
      ├─ExprX──────┤     │
      ├─ExprX+─────┘     │
      └─ExprX+───────────┘

    Alternatively, the parser could shift the `r#"[A-Z][a-zA-Z0-9]*"#` token and later use it
    to construct a `PCIdentifier`. This might then yield a parse tree like
      (Expr3)+ r#"[A-Z][a-zA-Z0-9]*"#
      │        ├─PCIdentifier───────┤
      │        └─Expr3──────────────┤
      └─(Expr3)+────────────────────┘

    See the LALRPOP manual for advice on making your grammar LR(1).

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:111:5: 111:73: Local ambiguity detected

    The problem arises after having observed the following symbols in the input:
      Expr3 (Expr3)+
    At that point, if the next token is a `r#"[a-z][a-zA-Z0-9]*"#`, then the parser can proceed
    in two different ways.

    First, the parser could execute the production at
    /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:111:5: 111:73, which would consume
    the top 2 token(s) from the stack and produce a `Expr2`. This might then yield a parse tree
    like
      Expr3 (Expr3)+ ExprX
      ├─Expr2──────┤     │
      ├─BinOp2─────┤     │
      ├─BinOp1─────┤     │
      ├─Expr1──────┤     │
      ├─Expr0──────┤     │
      ├─ExprX──────┤     │
      ├─ExprX+─────┘     │
      └─ExprX+───────────┘

    Alternatively, the parser could shift the `r#"[a-z][a-zA-Z0-9]*"#` token and later use it
    to construct a `Identifier`. This might then yield a parse tree like
      (Expr3)+ r#"[a-z][a-zA-Z0-9]*"#
      │        ├─Identifier─────────┤
      │        └─Expr3──────────────┤
      └─(Expr3)+────────────────────┘

    See the LALRPOP manual for advice on making your grammar LR(1).

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:121:12: 121:23: Conflict detected

      when in this state:
    (<ExprX> ",")+ = ExprX (*) "," ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Comma<ExprX> = ExprX (*) ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]

    and looking at a token `","` we can reduce to a `Comma<ExprX>` but we can also shift

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:236:5: 243:5: Conflict detected

      when in this state:
    Pattern0 = PCIdentifier (*) ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Pattern0 = PCIdentifier (*) "(" Type+ ")" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]

    and looking at a token `"("` we can reduce to a `Pattern0` but we can also shift

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:28:13: 28:20: Conflict detected

      when in this state:
    Pattern = Pattern (*) ":" Pattern0 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Pattern+ = Pattern (*) ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]

    and looking at a token `":"` we can reduce to a `Pattern+` but we can also shift

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:262:5: 269:0: Conflict detected

      when in this state:
    (<Bind> ";")+ = (<Bind> ";")+ (*) Bind ";" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Bind = (*) Identifier Pattern+ "=" Expr ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Bind = (*) Identifier "=" Expr ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Binds = (<Bind> ";")+ (*) ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Binds = (<Bind> ";")+ (*) Bind ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Identifier = (*) r#"[a-z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]

    and looking at a token `r#"[a-z][a-zA-Z0-9]*"#` we can reduce to a `Binds` but we can also shift

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:86:5: 86:62: Conflict detected

      when in this state:
    BinOp1 = BinOp1 "+" BinOp2 (*) ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = BinOp2 (*) "%" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = BinOp2 (*) "*" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = BinOp2 (*) "/" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = BinOp2 (*) "^" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]

    and looking at a token `"%"` we can reduce to a `BinOp1` but we can also shift

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:86:5: 86:62: Conflict detected

      when in this state:
    BinOp1 = BinOp1 "+" BinOp2 (*) ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = BinOp2 (*) "%" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = BinOp2 (*) "*" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = BinOp2 (*) "/" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = BinOp2 (*) "^" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]

    and looking at a token `"*"` we can reduce to a `BinOp1` but we can also shift

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:86:5: 86:62: Conflict detected

      when in this state:
    BinOp1 = BinOp1 "+" BinOp2 (*) ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = BinOp2 (*) "%" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = BinOp2 (*) "*" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = BinOp2 (*) "/" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = BinOp2 (*) "^" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]

    and looking at a token `"/"` we can reduce to a `BinOp1` but we can also shift

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:86:5: 86:62: Conflict detected

      when in this state:
    BinOp1 = BinOp1 "+" BinOp2 (*) ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = BinOp2 (*) "%" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = BinOp2 (*) "*" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = BinOp2 (*) "/" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = BinOp2 (*) "^" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]

    and looking at a token `"^"` we can reduce to a `BinOp1` but we can also shift

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:87:5: 87:62: Conflict detected

      when in this state:
    BinOp1 = BinOp1 "-" BinOp2 (*) ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = BinOp2 (*) "%" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = BinOp2 (*) "*" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = BinOp2 (*) "/" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = BinOp2 (*) "^" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]

    and looking at a token `"%"` we can reduce to a `BinOp1` but we can also shift

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:87:5: 87:62: Conflict detected

      when in this state:
    BinOp1 = BinOp1 "-" BinOp2 (*) ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = BinOp2 (*) "%" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = BinOp2 (*) "*" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = BinOp2 (*) "/" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = BinOp2 (*) "^" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]

    and looking at a token `"*"` we can reduce to a `BinOp1` but we can also shift

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:87:5: 87:62: Conflict detected

      when in this state:
    BinOp1 = BinOp1 "-" BinOp2 (*) ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = BinOp2 (*) "%" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = BinOp2 (*) "*" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = BinOp2 (*) "/" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = BinOp2 (*) "^" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]

    and looking at a token `"/"` we can reduce to a `BinOp1` but we can also shift

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:87:5: 87:62: Conflict detected

      when in this state:
    BinOp1 = BinOp1 "-" BinOp2 (*) ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = BinOp2 (*) "%" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = BinOp2 (*) "*" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = BinOp2 (*) "/" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    BinOp2 = BinOp2 (*) "^" Expr2 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]

    and looking at a token `"^"` we can reduce to a `BinOp1` but we can also shift

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:202:5: 202:32: Conflict detected

      when in this state:
    Type = PCIdentifier (*) "<" (Type)+ ">" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Type1 = PCIdentifier (*) ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]

    and looking at a token `"<"` we can reduce to a `Type1` but we can also shift

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:150:5: 156:0: Conflict detected

      when in this state:
    (<Type> "->")+ = Type (*) "->" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    TAssign = Type (*) ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]

    and looking at a token `"->"` we can reduce to a `TAssign` but we can also shift

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:121:12: 121:23: Conflict detected

      when in this state:
    (<ExprX> ",")+ = (<ExprX> ",")+ ExprX (*) "," ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Comma<ExprX> = (<ExprX> ",")+ ExprX (*) ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]

    and looking at a token `","` we can reduce to a `Comma<ExprX>` but we can also shift

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:28:13: 28:20: Conflict detected

      when in this state:
    Pattern = Pattern (*) ":" Pattern0 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Pattern+ = Pattern+ Pattern (*) ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]

    and looking at a token `":"` we can reduce to a `Pattern+` but we can also shift

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:262:5: 269:0: Conflict detected

      when in this state:
    (<Bind> ";")+ = (<Bind> ";")+ Bind (*) ";" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Binds = (<Bind> ";")+ Bind (*) ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]

    and looking at a token `";"` we can reduce to a `Binds` but we can also shift

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:150:5: 156:0: Conflict detected

      when in this state:
    (<Type> "->")+ = (<Type> "->")+ Type (*) "->" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    TAssign = (<Type> "->")+ Type (*) ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]

    and looking at a token `"->"` we can reduce to a `TAssign` but we can also shift

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:197:12: 197:22: Conflict detected

      when in this state:
    (<Type> ",")+ = Type (*) "," ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Comma<Type> = Type (*) ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]

    and looking at a token `","` we can reduce to a `Comma<Type>` but we can also shift

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:197:12: 197:22: Conflict detected

      when in this state:
    (<Type> ",")+ = (<Type> ",")+ Type (*) "," ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Comma<Type> = (<Type> ",")+ Type (*) ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]

    and looking at a token `","` we can reduce to a `Comma<Type>` but we can also shift

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:112:5: 112:9: Conflict detected

      when in this state:
    (Expr3)+ = (*) (Expr3)+ Expr3 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    (Expr3)+ = (*) Expr3 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr2 = Expr3 (*) ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr2 = Expr3 (*) (Expr3)+ ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) Identifier ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) Literal ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) PCIdentifier ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) "(" Comma<ExprX> ")" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) "[" Comma<ExprX> "]" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Identifier = (*) r#"[a-z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"\"[^\"]*\""# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"'[^']'"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"[+-]?\\d+"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"[+-]?\\d+\\.\\d+"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    PCIdentifier = (*) r#"[A-Z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]

    and looking at a token `"("` we can reduce to a `Expr2` but we can also shift

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:112:5: 112:9: Conflict detected

      when in this state:
    (Expr3)+ = (*) (Expr3)+ Expr3 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    (Expr3)+ = (*) Expr3 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr2 = Expr3 (*) ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr2 = Expr3 (*) (Expr3)+ ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) Identifier ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) Literal ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) PCIdentifier ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) "(" Comma<ExprX> ")" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) "[" Comma<ExprX> "]" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Identifier = (*) r#"[a-z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"\"[^\"]*\""# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"'[^']'"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"[+-]?\\d+"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"[+-]?\\d+\\.\\d+"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    PCIdentifier = (*) r#"[A-Z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]

    and looking at a token `"["` we can reduce to a `Expr2` but we can also shift

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:112:5: 112:9: Conflict detected

      when in this state:
    (Expr3)+ = (*) (Expr3)+ Expr3 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    (Expr3)+ = (*) Expr3 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr2 = Expr3 (*) ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr2 = Expr3 (*) (Expr3)+ ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) Identifier ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) Literal ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) PCIdentifier ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) "(" Comma<ExprX> ")" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) "[" Comma<ExprX> "]" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Identifier = (*) r#"[a-z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"\"[^\"]*\""# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"'[^']'"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"[+-]?\\d+"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"[+-]?\\d+\\.\\d+"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    PCIdentifier = (*) r#"[A-Z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]

    and looking at a token `r#"\"[^\"]*\""#` we can reduce to a `Expr2` but we can also shift

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:112:5: 112:9: Conflict detected

      when in this state:
    (Expr3)+ = (*) (Expr3)+ Expr3 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    (Expr3)+ = (*) Expr3 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr2 = Expr3 (*) ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr2 = Expr3 (*) (Expr3)+ ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) Identifier ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) Literal ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) PCIdentifier ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) "(" Comma<ExprX> ")" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) "[" Comma<ExprX> "]" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Identifier = (*) r#"[a-z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"\"[^\"]*\""# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"'[^']'"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"[+-]?\\d+"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"[+-]?\\d+\\.\\d+"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    PCIdentifier = (*) r#"[A-Z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]

    and looking at a token `r#"'[^']'"#` we can reduce to a `Expr2` but we can also shift

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:112:5: 112:9: Conflict detected

      when in this state:
    (Expr3)+ = (*) (Expr3)+ Expr3 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    (Expr3)+ = (*) Expr3 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr2 = Expr3 (*) ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr2 = Expr3 (*) (Expr3)+ ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) Identifier ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) Literal ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) PCIdentifier ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) "(" Comma<ExprX> ")" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) "[" Comma<ExprX> "]" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Identifier = (*) r#"[a-z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"\"[^\"]*\""# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"'[^']'"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"[+-]?\\d+"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"[+-]?\\d+\\.\\d+"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    PCIdentifier = (*) r#"[A-Z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]

    and looking at a token `r#"[+-]?\\d+"#` we can reduce to a `Expr2` but we can also shift

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:112:5: 112:9: Conflict detected

      when in this state:
    (Expr3)+ = (*) (Expr3)+ Expr3 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    (Expr3)+ = (*) Expr3 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr2 = Expr3 (*) ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr2 = Expr3 (*) (Expr3)+ ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) Identifier ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) Literal ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) PCIdentifier ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) "(" Comma<ExprX> ")" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) "[" Comma<ExprX> "]" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Identifier = (*) r#"[a-z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"\"[^\"]*\""# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"'[^']'"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"[+-]?\\d+"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"[+-]?\\d+\\.\\d+"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    PCIdentifier = (*) r#"[A-Z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]

    and looking at a token `r#"[+-]?\\d+\\.\\d+"#` we can reduce to a `Expr2` but we can also shift

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:112:5: 112:9: Conflict detected

      when in this state:
    (Expr3)+ = (*) (Expr3)+ Expr3 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    (Expr3)+ = (*) Expr3 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr2 = Expr3 (*) ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr2 = Expr3 (*) (Expr3)+ ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) Identifier ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) Literal ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) PCIdentifier ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) "(" Comma<ExprX> ")" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) "[" Comma<ExprX> "]" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Identifier = (*) r#"[a-z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"\"[^\"]*\""# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"'[^']'"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"[+-]?\\d+"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"[+-]?\\d+\\.\\d+"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    PCIdentifier = (*) r#"[A-Z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]

    and looking at a token `r#"[A-Z][a-zA-Z0-9]*"#` we can reduce to a `Expr2` but we can also shift

  /home/lokasku/dev/rust/risk/src/parser/parser.lalrpop:112:5: 112:9: Conflict detected

      when in this state:
    (Expr3)+ = (*) (Expr3)+ Expr3 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    (Expr3)+ = (*) Expr3 ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr2 = Expr3 (*) ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr2 = Expr3 (*) (Expr3)+ ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) Identifier ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) Literal ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) PCIdentifier ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) "(" Comma<ExprX> ")" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Expr3 = (*) "[" Comma<ExprX> "]" ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Identifier = (*) r#"[a-z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"\"[^\"]*\""# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"'[^']'"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"[+-]?\\d+"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    Literal = (*) r#"[+-]?\\d+\\.\\d+"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]
    PCIdentifier = (*) r#"[A-Z][a-zA-Z0-9]*"# ["%", "&&", "(", ")", "*", "+", ",", "-", "->", ".", "/", "/=", ":", "::", ";", "<", "<=", "=", "==", ">", ">=", "@", "[", "\\", "]", "^", "_", "else", "if", "in", "let", "match", "then", "type", "with", "|", "||", r#"\"[^\"]*\""#, r#"'[^']'"#, r#"[+-]?\\d+"#, r#"[+-]?\\d+\\.\\d+"#, r#"[A-Z][a-zA-Z0-9]*"#, r#"[a-z][a-zA-Z0-9]*"#, Eof]

    and looking at a token `r#"[a-z][a-zA-Z0-9]*"#` we can reduce to a `Expr2` but we can also shift


  --- stderr
  Warning: ignoring dangling/erroneous symlink /home/lokasku/dev/rust/risk/.direnv/flake-inputs/qdlc171rfkraszygacymyqb6a7vq6w3a-source/pkgs/test/nixpkgs-check-by-name/tests/multiple-failures/pkgs/by-name/A/fo@/foo
  Warning: ignoring dangling/erroneous symlink /home/lokasku/dev/rust/risk/.direnv/flake-inputs/qdlc171rfkraszygacymyqb6a7vq6w3a-source/pkgs/test/nixpkgs-check-by-name/tests/symlink-invalid/pkgs/by-name/fo/foo/foo
