// Comment & whitespace
COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") | ("//" ~ (!"\n" ~ ANY)*) }
WHITESPACE = _{ " " | NEWLINE }

// Literals
/////////// Numbers
int = @{ ("+" | "-")? ~ ASCII_DIGIT+ }
float = @{ ("+" | "-")? ~ ASCII_DIGIT+ ~ (".") ~ (ASCII_DIGIT*)? }

/////////// String
string = { "\"" ~ (!"\"" ~ ANY)* ~ "\"" }

/////////// Character
character = { "'" ~ (!"'" ~ ANY) ~ "'" }

/////////// Bool
true_ = { "True" }
false_ = { "False" }

literals = { float | int | string | character | true_ | false_ }

// Builtins
paren_expr = { "(" ~ comparison ~ ")" }
term = _{ paren_expr | literals | ident }

mul_div = { term ~ (mul ~ term | div ~ term)* }
add_sub = { mul_div ~ (add ~ mul_div | sub ~ mul_div)* }
comparison = {
    add_sub ~ (
        lt ~ add_sub
        | gt ~ add_sub
        | gte ~ add_sub
        | lte ~ add_sub
        | eq ~ add_sub
        | neq ~ add_sub
    )*
}

builtins = { lt | gt | gte | lte | and | or | eq | neq | colon | add | sub | mul | div | exp | mod_ }

lt = { "<" }
gt = { ">" }
gte = { ">=" }
lte = { "<=" }
and = { "&&" }
or = { "||" }
eq = { "==" }
neq = { "/=" }
colon = { ":" }
add = { "+" }
sub = { "-" }
mul = { "*" }
div = { "/" }
exp = { "^" }
mod_ = { "%" }

// Identifiers
ident = @{ ASCII_ALPHA_LOWER ~ ASCII_ALPHANUMERIC* }
pc_id = @{ ASCII_ALPHA_UPPER ~ ASCII_ALPHANUMERIC* }

// Type
type_ = { function_type | simple_type }
simple_type = { app_type | ident | pc_id | group_type | tuple_type }
group_type = { "{" ~ type_ ~ "}" }
app_type = { pc_id ~ type_+ }
tuple_type = { "(" ~ (type_ ~ ",")* ~ type_ ~ ")" }
function_type = { (simple_type ~ "->")* ~ simple_type }

// TypeDecl
type_decl = { "type" ~ pc_id ~ ident* ~ "=" ~ ((variant ~ "|")* ~ variant) }
variant = { pc_id ~ type_* }

// TypeAssign
type_assign = { ident ~ "::" ~  type_ }

// Pattern
pattern = { list_cons_pattern | simple_pattern }
simple_pattern = _{ app_pattern | wildcard | ident | pc_id | literals }
wildcard = { "_" }
app_pattern = { pc_id ~ type_+ }
list_cons_pattern = { simple_pattern ~ ":" ~ pattern }

// Bind
bind = { ident ~ pattern* ~ "=" ~ expr }

// Expr
expr = { simple_expr | annotation }
simple_expr = { let_ | condition | lambda | match_ | app_expr | fundamentals | comparison }
let_ = { "let" ~ (bind ~ ";")* ~ bind ~ "in" ~ expr }
condition = { "if" ~ expr ~ "then" ~ expr ~ "else" ~ expr }
lambda = { "\\" ~ pattern+ ~ "->" ~ expr }
match_ = { "match" ~ expr ~ "in" ~ ("|" ~ pattern ~ "->" ~ expr ~ "\n"?)+ }
app_expr = { (ident | pc_id) ~ fundamentals+ }
annotation = { simple_expr ~ "::" ~ type_ }
fundamentals = {
    literals
    | pc_id
    | ident ~ !builtins
    | "(" ~ ((expr ~ ",")* ~ expr) ~ ")"
    | "[" ~ ((expr ~ ",")* ~ expr) ~ "]"
}

stmt = {
    expr
    | bind
    | type_decl
    | type_assign
}

program = { stmt+ }